{"ast":null,"code":"var _jsxFileName = \"C:\\\\cuartoCiclo\\\\ConstruccionSoftware\\\\tecswapWeb\\\\C24_B_2024_TecSwapWeb\\\\Tecswap_front_web-master\\\\Tecswap_front_web-master\\\\src\\\\components\\\\Chatbot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Widget } from 'react-chat-widget';\nimport 'react-chat-widget/lib/styles.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  useEffect(() => {\n    // Inicializar el chatbot al montar el componente\n    // Por ejemplo, conectarse al chatbot usando WebSockets o iniciar sesión de sesión de usuario\n    initializeChatbot();\n  }, []);\n  const initializeChatbot = async () => {\n    // Inicializar la conversación con el chatbot, por ejemplo, obtener un token de sesión\n    // Esto puede implicar una llamada a la API del chatbot para iniciar la sesión\n    try {\n      const response = await axios.get('http://your-chatbot-api/init');\n      // Manejar la respuesta y actualizar el estado del componente\n    } catch (error) {\n      console.error('Error al inicializar el chatbot:', error);\n    }\n  };\n  const handleNewUserMessage = async newMessage => {\n    // Enviar el mensaje del usuario al chatbot y recibir la respuesta\n    try {\n      const response = await axios.post('http://your-chatbot-api/message', {\n        message: newMessage\n      });\n      // Manejar la respuesta del chatbot y actualizar el estado del componente\n    } catch (error) {\n      console.error('Error al enviar mensaje al chatbot:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot\",\n    children: /*#__PURE__*/_jsxDEV(Widget, {\n      handleNewUserMessage: handleNewUserMessage,\n      title: \"Chat con nuestro asistente\",\n      subtitle: \"Preg\\xFAntame cualquier cosa!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"RyA59LRbn9goj/9N7rELX+NWNVI=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useEffect","useState","Widget","axios","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","initializeChatbot","response","get","error","console","handleNewUserMessage","newMessage","post","message","className","children","title","subtitle","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/cuartoCiclo/ConstruccionSoftware/tecswapWeb/C24_B_2024_TecSwapWeb/Tecswap_front_web-master/Tecswap_front_web-master/src/components/Chatbot.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Widget } from 'react-chat-widget';\r\nimport 'react-chat-widget/lib/styles.css';\r\nimport axios from 'axios';\r\n\r\nconst Chatbot = () => {\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Inicializar el chatbot al montar el componente\r\n    // Por ejemplo, conectarse al chatbot usando WebSockets o iniciar sesión de sesión de usuario\r\n    initializeChatbot();\r\n  }, []);\r\n\r\n  const initializeChatbot = async () => {\r\n    // Inicializar la conversación con el chatbot, por ejemplo, obtener un token de sesión\r\n    // Esto puede implicar una llamada a la API del chatbot para iniciar la sesión\r\n    try {\r\n      const response = await axios.get('http://your-chatbot-api/init');\r\n      // Manejar la respuesta y actualizar el estado del componente\r\n    } catch (error) {\r\n      console.error('Error al inicializar el chatbot:', error);\r\n    }\r\n  };\r\n\r\n  const handleNewUserMessage = async (newMessage) => {\r\n    // Enviar el mensaje del usuario al chatbot y recibir la respuesta\r\n    try {\r\n      const response = await axios.post('http://your-chatbot-api/message', {\r\n        message: newMessage\r\n      });\r\n      // Manejar la respuesta del chatbot y actualizar el estado del componente\r\n    } catch (error) {\r\n      console.error('Error al enviar mensaje al chatbot:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot\">\r\n      <Widget\r\n        handleNewUserMessage={handleNewUserMessage}\r\n        title=\"Chat con nuestro asistente\"\r\n        subtitle=\"Pregúntame cualquier cosa!\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,MAAM,QAAQ,mBAAmB;AAC1C,OAAO,kCAAkC;AACzC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACd;IACA;IACAU,iBAAiB,CAAC,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC;IACA;IACA,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAG,CAAC,8BAA8B,CAAC;MAChE;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IAC1D;EACF,CAAC;EAED,MAAME,oBAAoB,GAAG,MAAOC,UAAU,IAAK;IACjD;IACA,IAAI;MACF,MAAML,QAAQ,GAAG,MAAMR,KAAK,CAACc,IAAI,CAAC,iCAAiC,EAAE;QACnEC,OAAO,EAAEF;MACX,CAAC,CAAC;MACF;IACF,CAAC,CAAC,OAAOH,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;IAC7D;EACF,CAAC;EAED,oBACER,OAAA;IAAKc,SAAS,EAAC,SAAS;IAAAC,QAAA,eACtBf,OAAA,CAACH,MAAM;MACLa,oBAAoB,EAAEA,oBAAqB;MAC3CM,KAAK,EAAC,4BAA4B;MAClCC,QAAQ,EAAC;IAA4B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACnB,EAAA,CAzCID,OAAO;AAAAqB,EAAA,GAAPrB,OAAO;AA2Cb,eAAeA,OAAO;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}